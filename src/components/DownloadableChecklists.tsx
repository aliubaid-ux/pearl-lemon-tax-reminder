import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Download, FileText, CheckCircle, Printer } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Checklist {
  id: string;
  title: string;
  description: string;
  items: string[];
  category: string;
}

const DownloadableChecklists: React.FC = () => {
  const { toast } = useToast();
  
  const checklists: Checklist[] = [
    {
      id: 'self-assessment-prep',
      title: 'Self Assessment Preparation',
      description: 'Everything you need before filing your Self Assessment',
      category: 'Self-Employed',
      items: [
        'P60 from employer (if applicable)',
        'P45 forms for any jobs that ended',
        'Bank statements for business income',
        'Receipts for business expenses',
        'Mileage records',
        'Home office expense records',
        'Professional fees and subscriptions',
        'Equipment and software purchases',
        'Previous year tax return',
        'Any dividend certificates'
      ]
    },
    {
      id: 'corporation-tax-prep',
      title: 'Corporation Tax Filing',
      description: 'Complete checklist for CT600 preparation',
      category: 'Company Director',
      items: [
        'Annual accounts (profit & loss, balance sheet)',
        'Corporation Tax computation',
        'Directors loan account details',
        'Share capital information',
        'Related party transactions',
        'R&D claims documentation',
        'Capital allowances calculations',
        'Previous year CT600',
        'Companies House confirmation statement',
        'Audit report (if applicable)'
      ]
    },
    {
      id: 'vat-quarter-prep',
      title: 'VAT Return Preparation',
      description: 'Quarterly VAT return essentials',
      category: 'VAT Registered',
      items: [
        'Sales invoices and receipts',
        'Purchase invoices and receipts',
        'Credit notes issued and received',
        'Import/export documentation',
        'Bad debt relief claims',
        'Partial exemption calculations',
        'Fuel scale charges',
        'Previous VAT return',
        'Bank statements',
        'Cash book or accounting records'
      ]
    },
    {
      id: 'record-keeping',
      title: 'Record Keeping Best Practices',
      description: 'Maintain compliant business records',
      category: 'General',
      items: [
        'Digital copies of all receipts',
        'Monthly bank reconciliations',
        'Petty cash records',
        'Employee records and payroll',
        'Contract and agreement copies',
        'Insurance documentation',
        'Equipment and asset registers',
        'Customer and supplier details',
        'Backup systems in place',
        'Regular data organization'
      ]
    }
  ];

  const downloadChecklist = (checklist: Checklist) => {
    try {
      const content = `${checklist.title}\n${checklist.description}\n\n${checklist.items.map((item, index) => `☐ ${item}`).join('\n')}\n\nGenerated by UK Tax Doctor`;
      
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${checklist.title.replace(/\s+/g, '-').toLowerCase()}-checklist.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Download successful",
        description: `${checklist.title} checklist has been downloaded`,
      });
    } catch (error) {
      toast({
        title: "Download failed",
        description: "There was an error downloading the checklist",
        variant: "destructive"
      });
    }
  };

  const printChecklist = (checklist: Checklist) => {
    try {
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        toast({
          title: "Print blocked",
          description: "Please allow popups to print checklists",
          variant: "destructive"
        });
        return;
      }
      
      const content = `
        <html>
          <head>
            <title>${checklist.title}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
              h1 { color: #333; border-bottom: 2px solid #333; padding-bottom: 10px; }
              .item { margin: 10px 0; font-size: 14px; }
              .checkbox { margin-right: 10px; }
              .description { font-style: italic; color: #666; margin-bottom: 20px; }
              .category { background: #f0f0f0; padding: 5px 10px; border-radius: 5px; display: inline-block; margin-bottom: 10px; }
              @media print {
                body { margin: 0; }
              }
            </style>
          </head>
          <body>
            <h1>${checklist.title}</h1>
            <div class="category">${checklist.category}</div>
            <p class="description">${checklist.description}</p>
            ${checklist.items.map(item => `
              <div class="item">
                <input type="checkbox" class="checkbox" /> ${item}
              </div>
            `).join('')}
            <hr style="margin-top: 30px;" />
            <small>Generated by UK Tax Doctor - ${new Date().toLocaleDateString()}</small>
          </body>
        </html>
      `;
      
      printWindow.document.write(content);
      printWindow.document.close();
      printWindow.print();
      
      toast({
        title: "Print initiated",
        description: `${checklist.title} is being prepared for printing`,
      });
    } catch (error) {
      toast({
        title: "Print failed",
        description: "There was an error preparing the checklist for printing",
        variant: "destructive"
      });
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileText className="h-5 w-5" />
          Downloadable Checklists
        </CardTitle>
        <p className="text-sm text-gray-600">
          Never miss important documents again
        </p>
      </CardHeader>
      <CardContent>
        <div className="grid gap-4">
          {checklists.map((checklist) => (
            <div key={checklist.id} className="border rounded-lg p-4 bg-blue-50 border-blue-200">
              <div className="flex items-start justify-between mb-3">
                <div>
                  <h4 className="font-semibold text-blue-900">{checklist.title}</h4>
                  <p className="text-sm text-blue-700">{checklist.description}</p>
                </div>
                <Badge variant="outline">{checklist.category}</Badge>
              </div>
              
              <div className="mb-3">
                <p className="text-sm text-gray-600 mb-2">
                  <CheckCircle className="h-4 w-4 inline mr-1" />
                  {checklist.items.length} items to check
                </p>
                <div className="text-xs text-gray-500 max-h-20 overflow-y-auto">
                  {checklist.items.slice(0, 3).map((item, index) => (
                    <div key={index}>• {item}</div>
                  ))}
                  {checklist.items.length > 3 && (
                    <div>... and {checklist.items.length - 3} more</div>
                  )}
                </div>
              </div>
              
              <div className="flex gap-2">
                <Button 
                  size="sm" 
                  onClick={() => downloadChecklist(checklist)}
                  className="flex-1"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => printChecklist(checklist)}
                >
                  <Printer className="h-4 w-4 mr-1" />
                  Print
                </Button>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default DownloadableChecklists;
