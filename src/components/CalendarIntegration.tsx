
import React, { useState } from 'react';
import { Calendar, Download, Upload, ExternalLink, Smartphone } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { TaxDeadline } from '@/types/tax';

interface CalendarIntegrationProps {
  deadlines: TaxDeadline[];
  userType: string;
}

const CalendarIntegration: React.FC<CalendarIntegrationProps> = ({ deadlines, userType }) => {
  const [selectedFormat, setSelectedFormat] = useState('ics');
  const [syncFrequency, setSyncFrequency] = useState('weekly');
  const { toast } = useToast();

  const generateICSContent = (deadlinesToExport: TaxDeadline[]) => {
    const icsEvents = deadlinesToExport.map(deadline => {
      const date = new Date(deadline.date);
      const dateStr = date.toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '');
      
      return `BEGIN:VEVENT
UID:${deadline.id}@uktaxcalendar.com
DTSTAMP:${new Date().toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '')}Z
DTSTART;VALUE=DATE:${dateStr.substring(0, 8)}
SUMMARY:${deadline.title}
DESCRIPTION:${deadline.description || 'UK Tax Deadline'}\\n\\nPriority: ${deadline.priority}\\nCategory: ${deadline.category}\\n\\nFor more information visit: https://gov.uk/hmrc
LOCATION:United Kingdom
CATEGORIES:TAX,DEADLINE,${deadline.priority.toUpperCase()}
PRIORITY:${deadline.priority === 'high' ? 1 : deadline.priority === 'medium' ? 5 : 9}
BEGIN:VALARM
TRIGGER:-P7D
ACTION:DISPLAY
DESCRIPTION:Reminder: ${deadline.title} due in 7 days
END:VALARM
BEGIN:VALARM
TRIGGER:-P1D
ACTION:DISPLAY
DESCRIPTION:Reminder: ${deadline.title} due tomorrow
END:VALARM
END:VEVENT`;
    }).join('\n');

    return `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//UK Tax Calendar Professional//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
X-WR-CALNAME:UK Tax Calendar - ${userType.replace('-', ' ').toUpperCase()}
X-WR-CALDESC:Professional UK tax deadline management calendar
X-WR-TIMEZONE:Europe/London
${icsEvents}
END:VCALENDAR`;
  };

  const generateCSVContent = (deadlinesToExport: TaxDeadline[]) => {
    const headers = 'Subject,Start Date,Start Time,End Date,End Time,All Day Event,Description,Location,Priority,Categories';
    const rows = deadlinesToExport.map(deadline => {
      const date = new Date(deadline.date).toLocaleDateString('en-GB');
      return `"${deadline.title}","${date}","00:00:00","${date}","23:59:59","True","${deadline.description || 'UK Tax Deadline'}","United Kingdom","${deadline.priority}","TAX,${deadline.category}"`;
    });
    
    return [headers, ...rows].join('\n');
  };

  const handleExport = () => {
    let content: string;
    let filename: string;
    let mimeType: string;

    if (selectedFormat === 'ics') {
      content = generateICSContent(deadlines);
      filename = `uk-tax-calendar-${userType}-${new Date().getFullYear()}.ics`;
      mimeType = 'text/calendar;charset=utf-8';
    } else {
      content = generateCSVContent(deadlines);
      filename = `uk-tax-calendar-${userType}-${new Date().getFullYear()}.csv`;
      mimeType = 'text/csv;charset=utf-8';
    }

    const blob = new Blob([content], { type: mimeType });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    toast({
      title: 'Export Complete',
      description: `Calendar exported as ${selectedFormat.toUpperCase()} file successfully.`,
    });
  };

  const handleGoogleCalendarSync = () => {
    const calendarUrl = 'https://calendar.google.com/calendar/render?action=TEMPLATE';
    const params = new URLSearchParams({
      text: 'UK Tax Deadlines',
      details: `Professional UK tax deadline management for ${userType.replace('-', ' ')}\n\nGenerated by UK Tax Calendar Professional`,
      location: 'United Kingdom'
    });
    
    window.open(`${calendarUrl}&${params.toString()}`, '_blank');
    
    toast({
      title: 'Google Calendar Integration',
      description: 'Opening Google Calendar to set up automatic sync...',
    });
  };

  const handleOutlookSync = () => {
    const outlookUrl = 'https://outlook.live.com/calendar/0/deeplink/compose';
    const params = new URLSearchParams({
      subject: 'UK Tax Deadlines Setup',
      body: 'Setting up UK Tax Calendar integration with Outlook.\n\nPlease import the downloaded ICS file to sync all deadlines.',
      startdt: new Date().toISOString(),
      enddt: new Date(Date.now() + 60 * 60 * 1000).toISOString()
    });
    
    window.open(`${outlookUrl}?${params.toString()}`, '_blank');
    
    toast({
      title: 'Outlook Integration',
      description: 'Opening Outlook to set up calendar integration...',
    });
  };

  const handleAppleCalendarSync = () => {
    // Generate ICS content and create data URL for Apple Calendar
    const icsContent = generateICSContent(deadlines);
    const dataUrl = `data:text/calendar;charset=utf-8,${encodeURIComponent(icsContent)}`;
    
    const link = document.createElement('a');
    link.href = dataUrl;
    link.download = `uk-tax-calendar-${userType}.ics`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    toast({
      title: 'Apple Calendar Integration',
      description: 'ICS file downloaded. Double-click to add to Apple Calendar.',
    });
  };

  const handleWebCalSubscription = () => {
    const subscriptionUrl = `https://api.uktaxcalendar.com/calendar/${userType}/subscription.ics`;
    
    navigator.clipboard.writeText(subscriptionUrl).then(() => {
      toast({
        title: 'Subscription URL Copied',
        description: 'Calendar subscription URL copied to clipboard. Add this to your calendar app for automatic updates.',
        duration: 5000,
      });
    });
  };

  return (
    <Card className="bg-white/95 backdrop-blur-sm border-0 shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-3">
          <Calendar className="h-6 w-6 text-blue-600" />
          Calendar Integration & Sync
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Export Options */}
        <div className="space-y-4">
          <h3 className="font-semibold text-gray-900">Export Calendar</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Export Format</label>
              <Select value={selectedFormat} onValueChange={setSelectedFormat}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ics">ICS (Calendar)</SelectItem>
                  <SelectItem value="csv">CSV (Spreadsheet)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end">
              <Button onClick={handleExport} className="w-full">
                <Download className="h-4 w-4 mr-2" />
                Export Calendar
              </Button>
            </div>
          </div>
        </div>

        {/* Platform Integration */}
        <div className="space-y-4">
          <h3 className="font-semibold text-gray-900">Platform Integration</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <Button variant="outline" onClick={handleGoogleCalendarSync} className="h-auto p-4">
              <div className="flex items-center gap-3">
                <ExternalLink className="h-5 w-5 text-blue-600" />
                <div className="text-left">
                  <div className="font-medium">Google Calendar</div>
                  <div className="text-xs text-gray-500">Sync with Google Workspace</div>
                </div>
              </div>
            </Button>
            
            <Button variant="outline" onClick={handleOutlookSync} className="h-auto p-4">
              <div className="flex items-center gap-3">
                <ExternalLink className="h-5 w-5 text-indigo-600" />
                <div className="text-left">
                  <div className="font-medium">Microsoft Outlook</div>
                  <div className="text-xs text-gray-500">Sync with Office 365</div>
                </div>
              </div>
            </Button>
            
            <Button variant="outline" onClick={handleAppleCalendarSync} className="h-auto p-4">
              <div className="flex items-center gap-3">
                <Smartphone className="h-5 w-5 text-gray-600" />
                <div className="text-left">
                  <div className="font-medium">Apple Calendar</div>
                  <div className="text-xs text-gray-500">For iPhone, iPad & Mac</div>
                </div>
              </div>
            </Button>
            
            <Button variant="outline" onClick={handleWebCalSubscription} className="h-auto p-4">
              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-green-600" />
                <div className="text-left">
                  <div className="font-medium">Web Calendar</div>
                  <div className="text-xs text-gray-500">Auto-updating subscription</div>
                </div>
              </div>
            </Button>
          </div>
        </div>

        {/* Sync Settings */}
        <div className="space-y-4">
          <h3 className="font-semibold text-gray-900">Sync Preferences</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Update Frequency</label>
              <Select value={syncFrequency} onValueChange={setSyncFrequency}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="realtime">Real-time</SelectItem>
                  <SelectItem value="daily">Daily</SelectItem>
                  <SelectItem value="weekly">Weekly</SelectItem>
                  <SelectItem value="monthly">Monthly</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        {/* Integration Guide */}
        <div className="bg-blue-50 p-4 rounded-lg">
          <h4 className="font-medium text-blue-900 mb-2">📅 Integration Guide</h4>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>• <strong>Google Calendar:</strong> Automatically syncs with your Google account</li>
            <li>• <strong>Outlook:</strong> Import the ICS file for one-time setup</li>
            <li>• <strong>Apple Calendar:</strong> Double-click the ICS file to add events</li>
            <li>• <strong>Web Calendar:</strong> Subscribe to URL for automatic updates</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
};

export default CalendarIntegration;
