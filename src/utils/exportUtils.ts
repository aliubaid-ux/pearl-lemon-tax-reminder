
import { TaxDeadline } from '@/types/tax';
import { format } from 'date-fns';

export const generatePrintableCalendar = (deadlines: TaxDeadline[], userType: string): string => {
  const sortedDeadlines = deadlines.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
  
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>UK Tax Calendar - ${userType}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }
        .deadline { margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
        .high-priority { border-left: 5px solid #ef4444; }
        .medium-priority { border-left: 5px solid #f59e0b; }
        .low-priority { border-left: 5px solid #10b981; }
        .date { font-weight: bold; color: #1f2937; }
        .category { background: #f3f4f6; padding: 2px 8px; border-radius: 12px; font-size: 12px; }
        .penalty { color: #ef4444; font-style: italic; margin-top: 5px; }
        @media print {
          body { margin: 0; }
          .no-print { display: none; }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>UK Tax Calendar</h1>
        <p>Profile: ${userType.replace('-', ' ').toUpperCase()}</p>
        <p>Generated: ${format(new Date(), 'dd MMMM yyyy')}</p>
      </div>
      
      <div class="deadlines">
        ${sortedDeadlines.map(deadline => `
          <div class="deadline ${deadline.priority}-priority">
            <div class="date">${format(new Date(deadline.date), 'dd MMMM yyyy')}</div>
            <h3>${deadline.title}</h3>
            <p>${deadline.description}</p>
            <div class="category">${deadline.category.replace('-', ' ').toUpperCase()}</div>
            ${deadline.latePenalty ? `<div class="penalty">Late Penalty: ${deadline.latePenalty}</div>` : ''}
          </div>
        `).join('')}
      </div>
      
      <script>
        window.onload = function() {
          window.print();
        }
      </script>
    </body>
    </html>
  `;
  
  return html;
};

export const printCalendar = (deadlines: TaxDeadline[], userType: string): void => {
  const printWindow = window.open('', '_blank');
  if (printWindow) {
    printWindow.document.write(generatePrintableCalendar(deadlines, userType));
    printWindow.document.close();
  }
};

export const exportToCSV = (deadlines: TaxDeadline[]): void => {
  const headers = ['Date', 'Title', 'Description', 'Category', 'Priority', 'Late Penalty'];
  const rows = deadlines.map(deadline => [
    format(new Date(deadline.date), 'yyyy-MM-dd'),
    deadline.title,
    deadline.description.replace(/,/g, ';'),
    deadline.category,
    deadline.priority,
    deadline.latePenalty || ''
  ]);
  
  const csvContent = [headers, ...rows]
    .map(row => row.map(field => `"${field}"`).join(','))
    .join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `uk-tax-calendar-${format(new Date(), 'yyyy-MM-dd')}.csv`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const shareDeadlines = async (deadlines: TaxDeadline[], userType: string): Promise<void> => {
  const upcomingDeadlines = deadlines
    .filter(deadline => new Date(deadline.date) > new Date())
    .slice(0, 5);
  
  const shareText = `My UK Tax Calendar (${userType}):\n\n${upcomingDeadlines
    .map(deadline => `ðŸ“… ${format(new Date(deadline.date), 'dd MMM yyyy')}: ${deadline.title}`)
    .join('\n')}\n\nGenerated by UK Tax Calendar`;
  
  if (navigator.share) {
    try {
      await navigator.share({
        title: 'UK Tax Calendar',
        text: shareText,
        url: window.location.href
      });
    } catch (error) {
      console.log('Share cancelled');
    }
  } else {
    // Fallback to clipboard
    await navigator.clipboard.writeText(shareText);
  }
};
